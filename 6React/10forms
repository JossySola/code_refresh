# React Forms

Think about how forms work in a typical, non-React environment. A user types some data into a form’s input fields, and the server doesn’t know about it. The server remains clueless until the user hits a “submit” button, which sends all of the form’s data over to the server simultaneously.

In React, as in many other JavaScript environments, this is not the best way of doing things.

The problem is the period of time during which a form thinks that a user has typed one thing, but the server thinks that the user has typed a different thing. What if, during that time, a *third* part of the website needs to know what a user has typed? It could ask the form or the server and get two different answers. In a complex JavaScript app with many moving, interdependent parts, this kind of conflict can easily lead to problems.

In a React form, you want the server to know about every new character or deletion, *as soon as it happens*. That way, your screen will always be in sync with the rest of your application.

## Input onChange

In a regular HTML form, the state of the form is typically managed by the browser. It doesn't update the server until the user hits *submit*.

In a React form, the state of the form can be managed by the component, and updated are triggered by the `onChange` event. When the user interact with an input, such as entering or deleting any characters, the `onChange` event fires and updates the component state.

*The initial text in the State should be an empty string*

In React, the `value` prop of an input element is used to control the value of the input and keep it in sync with the component's state.Without setting the `value` prop, changes made to the input would not be reflected in the component's state, leading to inconsistencies and potential bugs down the line.

To ensure that the input's value matches the component state, we can set the `value` prop and use the `onChange` event to update the state with the new value. When the state is updated, the component re-renders, and the `value` prop is set to the new value from the component's state.

This makes the component state the "source of truth".

+ The state of a React form is managed by the component, and updates are triggered by the `onChange` event.
+ The `onChange` event uses an event handler to capture changes and determine what actions to take.
+ A React form uses the State hook to store the value of the input field in the component's state. The state can then be updated with the state setter.
+ React components can be controlled or uncontrolled. Most React forms are controlled, as they control the input's value with the state.

---
 _All the information written above is taken from [Codecademy](https://www.codecademy.com), **Front-End Career Path**._